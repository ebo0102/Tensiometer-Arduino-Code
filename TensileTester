#include "Adafruit_Keypad.h"
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include "HX711.h"
#include <SPI.h>
#include <SD.h>

const byte ROWS = 4; // rows
const byte COLS = 4; // columns
//define the symbols on the buttons of the keypads
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {13, 12, 11, 10}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {9, 8, 7, 6}; //connect to the column pinouts of the keypad

//initialize an instance of class NewKeypad
Adafruit_Keypad customKeypad = Adafruit_Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS);

//0x27 is the device address.
LiquidCrystal_I2C lcd(0x27, 20, 4); // set the LCD address to 0x27 for a 16 chars and 2 line display

// HX711 circuit wiring
const int LOADCELL_DOUT_PIN = 22;
const int LOADCELL_SCK_PIN = 23;
HX711 scale;

//State
static unsigned int state;

//Sample Parameters
float length;
float width;
float thickness;
double area;

double scaleRead;
double totalDistance;
const double metersPerStep = 0.0000025;
double strain;
double stress;
double force;

//Callibration Parameters
long scaleReading;
double CallibrationWeight;
const double gravity = 9.81;

//Stepper Motor Low Signal Pins
const int stepPin = 4;
const int dirPin = 3;
const int enPin = 2;

long mSteps; //microsteps
long distUp = 150; //30cm
long distDown = 150; //
const long stepsperrev = 200;
const long mstepsperrev = stepsperrev*8;
const long distperrev = 2;

long toMSteps(long distance){ //caculates steps from distance for for loop
  mSteps = (distance*mstepsperrev)/2;
  return mSteps;
}

//temp robbie code
char StringNum[4];
int x = 0;

int i = 0;  //length
int j = 0;
int k = 0;
int m = 0;  //knownWeight

void setup() {
  Serial.begin(9600);
  customKeypad.begin();
  lcd.init(); 
  lcd.clear();         
  lcd.backlight();      // Make sure backlight is on

  //Initialize Parameters
  state = 0;
  //length = 0;         //mm
  //width = 0;          //mm
  //thickness = 0;      //um
  //scaleReading = 0;   //
  //area = 0;
  totalDistance = 0.2;  //meters
  
  //Stepper Motor Pin Read/Write
  pinMode(stepPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  pinMode(enPin, OUTPUT);
  digitalWrite(enPin, LOW);
  
  //nitrile glove example given in class
  length = 55;
  width = 20;
  thickness = 76;
  
  //dog bone nitrile example given in class
  /*
  length = 40;
  width = 6;
  thickness = 500;
  */
  CallibrationWeight = 1000; //grams

  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale(-477.5);      //"Factory Settings"
  scale.tare();

}

void loop() {
  customKeypad.tick();
  keypadEvent e = customKeypad.read();

  switch (state){ //Transitions
    case 0:
      while(customKeypad.available()){
        e = customKeypad.read();
      }
      if((char)e.bit.KEY == '1'){
        lcd.clear();
        state = 1;
      }
      else if((char)e.bit.KEY == '2'){
        lcd.clear();
        state = 7;
      }
      break;
    // CALLIBRATION CASES
    case 1:
      while(customKeypad.available()){
        e = customKeypad.read();
      }
      if((char)e.bit.KEY == 'A'){
        lcd.clear();
        state = 2;
      }
      break;
    case 2:
      scale.set_scale();
      state = 3;
      delay(3000);
      lcd.clear();
      break;
    case 3:
      delay(3000);
      scale.tare();
      state = 4;
      lcd.clear();
      break;
    case 4:
      while(customKeypad.available()){
        e = customKeypad.read();
      }
      if((char)e.bit.KEY == '1'){
        scaleReading = scale.get_units(10);
        lcd.clear();
        state = 5;
      }
      break;
    case 5:
        while(customKeypad.available()){
            e = customKeypad.read();
        }
        if((char)e.bit.KEY == 'A' ){
            lcd.clear();
            state = 6;
        }
        else if (returnNum((char)e.bit.KEY) == 1 && e.bit.EVENT == KEY_JUST_PRESSED){
            if (x < 3){
                StringNum[x] = (char)e.bit.KEY;
                x++;
            }
            if (x == 3){
                StringNum[x] = '\0';
                CallibrationWeight = atof(StringNum);
                StringNum[0] = '\0';
                x=0;
            }
        lcd.setCursor(2+m,2);
        lcd.print((char)e.bit.KEY);
        m = m + 1;
      }
      break;
    case 6:
      m = 0;
      scale.set_scale(scaleReading/CallibrationWeight); //callibrated scale
      scale.tare();               // reset the scale to 0
      delay(3000);
      state = 0;
      lcd.clear();
      break;
    // RUNNING SAMPLE CASES
    case 7:
      
      while(customKeypad.available()){
        e = customKeypad.read();
      }
      if((char)e.bit.KEY == 'A' ){
        lcd.clear();
        state = 8;
      }
      else if (returnNum((char)e.bit.KEY) == 1 && e.bit.EVENT == KEY_JUST_PRESSED){
        if (x < 3){
            StringNum[x] = (char)e.bit.KEY;
            x++;
          }
          if (x == 3){
            StringNum[x] = '\0';
            length = atof(StringNum);
            StringNum[0] = '\0';
            x=0;
          }
        lcd.setCursor(2+i,3);
        lcd.print((char)e.bit.KEY);
        i = i + 1;
      }
      break;
    case 8:
      while(customKeypad.available()){
        e = customKeypad.read();
      }
      if((char)e.bit.KEY == 'B' ){
        lcd.clear();
        state = 9;
      }
      else if (returnNum((char)e.bit.KEY) == 1 && e.bit.EVENT == KEY_JUST_PRESSED){
          if (x < 3){
            StringNum[x] = (char)e.bit.KEY;
            x++;
          }
          if (x == 3){
            StringNum[x] = '\0';
            width = atof(StringNum);
            StringNum[0] = '\0';
            x=0;
          }
        lcd.setCursor(2+j,3);
        lcd.print((char)e.bit.KEY);
        j = j + 1;
      }
      break;
    case 9:
      while(customKeypad.available()){
        e = customKeypad.read();
      }
      if((char)e.bit.KEY == 'C' ){
        lcd.clear();
        state = 10;
      }
      else if (returnNum((char)e.bit.KEY) == 1 && e.bit.EVENT == KEY_JUST_PRESSED){
          if (x < 3){
            StringNum[x] = (char)e.bit.KEY;
            x++;
          }
          if (x == 3){
            StringNum[x] = '\0';
            double num = atof(StringNum);
            StringNum[0] = '\0';
            x=0;
          }
        lcd.setCursor(2+k,3);
        lcd.print((char)e.bit.KEY);
        k = k + 1;
      }
      break;
    case 10:
      
      //Math for Stress and Strain
      area = width*thickness/(1000000000);
      
      Serial.println("Stress, Strain");
      //Serial.println("Distance (m), Load (g)");

      lcd.clear();
      digitalWrite(dirPin, HIGH); //Motor Moves System in the z Direction
      for (long i = 0; i < toMSteps(distUp); i++) {
        digitalWrite(stepPin, HIGH);
        delayMicroseconds(100);
        digitalWrite(stepPin, LOW);
        delayMicroseconds(100);

        totalDistance = totalDistance+metersPerStep;

        if(i % 400 == 0){
        //stress
        stress = ((totalDistance-(0.195-(length/(1000))))-(length/(1000)))/(length/(1000));
          
        //strain in Pa
        scaleRead = (scale.get_units())/(1000);
        force = scaleRead*gravity;
        strain = (force/area); // in Pa
        
        //Serial.print(totalDistance,5);  
        Serial.print(strain, 5);
        Serial.print(", ");
        //Serial.println(scaleRead, 5);
        Serial.println(stress, 5);
        
        }
      }
      digitalWrite(dirPin, LOW); //Motor Moves System in the -z Direction
      for (long i = 0; i < toMSteps(distDown); i++) {
        digitalWrite(stepPin, HIGH);
        delayMicroseconds(100);
        digitalWrite(stepPin, LOW);
        delayMicroseconds(100);
      }
      //Reset to Starting Distance
      totalDistance = 0.195;
      state = 11;
      break;
    case 11:
      while(customKeypad.available()){
        e = customKeypad.read();
      }
      if((char)e.bit.KEY == 'A'){
        lcd.clear();
        state = 12;
      }
      /*else if((char)e.bit.KEY == 'B'){
        lcd.clear();
        state = 13;
      }*/
      break;
    case 12:
      delay(3000);
      lcd.clear();
      i = 0;
      j = 0;
      k = 0;
      state = 0;
      break;
    case 13:
      delay(3000);
      lcd.clear();
      i = 0;
      j = 0;
      k = 0;
      state = 0;
      break;
  }

  switch (state){ //Display
    case 0:
      lcd.setCursor(2,0);
      lcd.print("SELECT AN OPTION");
      lcd.setCursor(2,1);
      lcd.print("1. CALLIBRATE");
      lcd.setCursor(2,2);
      lcd.print("2. SAMPLE");
      break;
    // CALLIBRATION CASES
    case 1:
      lcd.setCursor(2,0);
      lcd.print("CALLIBRATE");
      lcd.setCursor(2,1);
      lcd.print("A. TARE");
      break;
    case 2:
      lcd.setCursor(2,0);
      lcd.print("TARING 0 KG");
      lcd.setCursor(1,1);
      lcd.print("REMOVE ALL WEIGHTS");
      break;
    case 3:
      lcd.setCursor(2,0);
      lcd.print("TARING COMPLETE");
      break;
    case 4:
      lcd.setCursor(2,0);
      lcd.print("PLACE WEIGHT");
      lcd.setCursor(2,1);
      lcd.print("ON THE");
      lcd.setCursor(2,2);
      lcd.print("LOAD CELL");
      lcd.setCursor(2,3);
      lcd.print("1. DONE");
      break;
    case 5:
      lcd.setCursor(2,0);
      lcd.print("ENTER KNOWN");
      lcd.setCursor(2,1);
      lcd.print("WEIGHT (G)");
      break;
    case 6:
      lcd.setCursor(2,0);
      lcd.print("CALLIBRATION");
      lcd.setCursor(2,1);
      lcd.print("COMPLETE");
      lcd.setCursor(2,2);
      lcd.print("RETURNING TO");
      lcd.setCursor(2,3);
      lcd.print("MAIN SCREEN...");
      break;
    // RUNNING SAMPLE CASES
    case 7:
      lcd.setCursor(2,0);
      lcd.print("SAMPLE");
      lcd.setCursor(2,1);
      lcd.print("ENTER PARAMETERS");
      lcd.setCursor(2,2);
      lcd.print("LENGTH (MM)");
      break;
    case 8:
      lcd.setCursor(2,0);
      lcd.print("SAMPLE");
      lcd.setCursor(2,1);
      lcd.print("ENTER PARAMETERS");
      lcd.setCursor(2,2);
      lcd.print("WIDTH (MM)");
      break;
    case 9:
      lcd.setCursor(2,0);
      lcd.print("SAMPLE");
      lcd.setCursor(2,1);
      lcd.print("ENTER PARAMETERS");
      lcd.setCursor(2,2);
      lcd.print("THICKNESS (uM)");
      break;
    case 10:
      lcd.setCursor(2,0);
      lcd.print("RUNNING SAMPLE");
      break;
    case 11:
      lcd.setCursor(2,0);
      lcd.print("FILE SAVED");
      lcd.setCursor(2,1);
      lcd.print("TO SD CARD");
      lcd.setCursor(2,2);
      lcd.print("A. RETURN TO MENU");
      //lcd.setCursor(2,3);
      //lcd.print("B. EJECT SD CARD");
      break;
    case 12:
      lcd.setCursor(2,0);
      lcd.print("RETURNING TO");
      lcd.setCursor(2,1);
      lcd.print("MAIN SCREEN...");
      break;
    case 13:
      lcd.setCursor(2,0);
      lcd.print("SD CARD EJECTED");
      lcd.setCursor(2,1);
      lcd.print("RETURNING TO");
      lcd.setCursor(2,2);
      lcd.print("MAIN SCREEN...");
      break;
  }

  delay(100);
}

boolean returnNum(char key){
  if (isdigit(key)) {
    if (key >=  '0' && key <= '9') { return true; }
    return false;
  }
  return false;
}
